1. django 模型models 常用字段

        
1、models.AutoField　　
       自增列 = int(11)
       如果没有的话，默认会生成一个名称为 id 的列
       如果要显式的自定义一个自增列，必须设置primary_key=True。
 
2、models.CharField　　
       字符串字段
　　必须设置max_length参数
 
3、models.BooleanField　　
       布尔类型=tinyint(1)
　　不能为空，可添加Blank=True
 
4、models.ComaSeparatedIntegerField　　
       用逗号分割的数字=varchar
　　继承CharField，所以必须 max_lenght 参数
 
5、models.DateField
       日期类型 date
　　DateField.auto_now：保存时自动设置该字段为现在日期，最后修改日期
       DateField.auto_now_add：当该对象第一次被创建是自动设置该字段为现在日期，创建日期。
 
6、models.DateTimeField　　
       日期时间类型 datetime
　　同DateField的参数
 
7、models.Decimal　　
       十进制小数类型 = decimal
       DecimalField.max_digits：数字中允许的最大位数
       DecimalField.decimal_places：存储的十进制位数
 
8、models.EmailField　　
　　一个带有检查 Email 合法性的 CharField
 
9、models.FloatField　　
       浮点类型 = double
 
10、models.IntegerField　　
       整形
 
11、models.BigIntegerField　　
       长整形
　　integer_field_ranges = {
　　　　'SmallIntegerField': (-32768, 32767),
　　　　'IntegerField': (-2147483648, 2147483647),
　　　　'BigIntegerField': (-9223372036854775808, 9223372036854775807),
　　　　'PositiveSmallIntegerField': (0, 32767),
　　　　'PositiveIntegerField': (0, 2147483647),
　　}
 
12、models.GenericIPAddressField　　
        一个带有检查 IP地址合法性的 CharField
 
13、models.NullBooleanField　　
       允许为空的布尔类型
 
14、models.PositiveIntegerFiel　　
       正整数
 
15、models.PositiveSmallIntegerField　　
       正smallInteger
 
16、models.SlugField　　
       减号、下划线、字母、数字
 
17、models.SmallIntegerField　　
       数字
　　数据库中的字段有：tinyint、smallint、int、bigint
 
18、models.TextField　　
        大文本。默认对应的form标签是textarea。
 
19、models.TimeField　　
       时间 HH:MM[:ss[.uuuuuu]]
 
20、models.URLField　　
        一个带有URL合法性校验的CharField。
 
21、models.BinaryField　　
       二进制
       存储二进制数据。不能使用filter函数获得QuerySet。
 
22、models.ImageField   
       图片
       ImageField.height_field、ImageField.width_field：如果提供这两个参数，则图片将按提供的高度和宽度规格保存。
       该字段要求 Python Imaging 库Pillow。
       会检查上传的对象是否是一个合法图片。
 
23、models.FileField(upload_to=None[, max_length=100, ** options])
       文件
       FileField.upload_to：一个用于保存上传文件的本地文件系统路径，该路径由 MEDIA_ROOT 中设置
       这个字段不能设置primary_key和unique选项.在数据库中存储类型是varchar，默认最大长度为100
 
24、models.FilePathField(path=None[, math=None, recursive=False, max_length=100, **options])
       FilePathField.path：文件的绝对路径，必填
       FilePathField.match：用于过滤路径下文件名的正则表达式，该表达式将用在文件名上（不包括路径）。
       FilePathField.recursive：True 或 False，默认为 False，指定是否应包括所有子目录的路径。
       例如：FilePathField(path="/home/images", match="foo.*", recursive=True)
                         将匹配“/home/images/foo.gif”但不匹配“/home/images/foo/bar.gif”    
  

2. django 模型models 字段常用参数
 
1、 null
        如果是True，Django会在数据库中将此字段的值置为NULL，默认值是False
 
2、blank
　　如果为True时django的 Admin 中添加数据时可允许空值，可以不填。如果为False则必须填。默认是False。
       null纯粹是与数据库有关系的。而blank是与页面必填项验证有关的
 
3、primary_key = False
　  主键，对AutoField设置主键后，就会代替原来的自增 id 列
 
4、auto_now 和 auto_now_add
　　auto_now   自动创建---无论添加或修改，都是当前操作的时间
　　auto_now_add  自动创建---永远是创建时的时间
 
5、choices
      一个二维的元组被用作choices，如果这样定义，Django会select box代替普通的文本框，
      并且限定choices的值是元组中的值
      GENDER_CHOICE = (
            (u'M', u'Male'),
            (u'F', u'Female'),
      )
      gender = models.CharField(max_length=2,choices = GENDER_CHOICE)
 
6、max_length
        字段长度
 
7、default
        默认值
 
8、verbose_name　　
       Admin中字段的显示名称，如果不设置该参数时，则与属性名。
 
9、db_column　　
       数据库中的字段名称
 
10、unique=True　　
      不允许重复
 
11、db_index = True　　
     数据库索引
 
12、editable=True　　
      在Admin里是否可编辑
 
13、error_messages=None　　
      错误提示
 
14、auto_created=False　　
      自动创建
 
15、help_text　　
      在Admin中提示帮助信息
 
16、validators=[]
         验证器
 
17、upload-to
        文件上传时的保存上传文件的目录
 

models.py
        # -*- coding: utf-8 -*-
from __future__ import unicode_literals
from django.db import models
 
class UserInfo(models.Model):
    userName = models.CharField(max_length=30)  #用户名
    passWord = models.CharField(max_length=30)  #密码
    gendle = models.BooleanField()  #性别
    birthday = models.DateField()   #出生日期
    weigth = models.FloatField()    #体重
    heigth = models.IntegerField()  #身高
    email = models.EmailField()     #邮箱
    host = models.GenericIPAddressField()  #IP地址
    introduce = models.TextField()  #个人简介
    blog = models.URLField()        #博客地址
    photo = models.ImageField()     #照片
    CV = models.FilePathField()     #个人简历文件
    createDate = models.DateTimeField()     #帐号申请时间
        执行结果：

                
 
3.常见异常处理
    1) 
               ERRORS：
               web.UserInfo.photo: (fields.E210) Cannot use ImageField because Pillow is not installed.
               HINT: Get Pillow at https://pypi.python.org/pypi/Pillow or run command "pip install Pillow".
 
       原因：      

       这是因为使用了ImageField()字段，该字段是直接在数据库中存储图片的，数据库中实际存储时要使用python的Pillow模块对图片进行处理后才能存储进去。因此因需使用pip install Pillow 安装该模块即可解决该报错。
    2）
             ERRORS：
                在执行python manage.py makemigrations 时需要手动选择处理方法：
                You are trying to add a non-nullable field 'CV' to userinfo without a default; we can't do that (the database                     needs something to populate existing rows).
Please select a fix:
 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)
 2) Quit, and let me add a default in models.py
Select an option: 1
Please enter the default value now, as valid Python
The datetime and django.utils.timezone modules are available, so you can do e.g. timezone.now
Type 'exit' to exit this prompt
>>> timezone.now
     原因：       
             这是因为UserInfo数据表中已经有了"userName"和"passWord" 这两个字段，当在新增字段时就会出现这种Warning。是由于django框架在生成SQL语句时发现数据表不为空，担心新增不为Null的字段添加到该表中时，表中以前的数据行在填充这些字段时需要填充的值不明确，所以才会询问用户处理方式。
            选1，则会在已存在行中添加null,选2，则会要求在models.py中添加默认值。
            在models.py中设置默认值的方法：
                     host = models.GenericIPAddressField(default = '127.0.0.1')
 
    3)  执行python makemigrations正常，但是执行python migrate 报错，之后再执行无法生效的处理办法






python django模型内部类meta详细解释
abstract
     这个属性是定义当前的模型类是不是一个抽象类。所谓抽象类是不会相应数据库表的。一般我们用它来归纳一些公共属性字段，然后继承它的子类能够继承这些字段。
比方以下的代码中Human是一个抽象类。Employee是一个继承了Human的子类，那么在执行syncdb命令时，不会生成Human表。可是会生成一个Employee表，它包括了Human中继承来的字段。以后假设再加入一个Customer模型类，它能够相同继承Human的公共属性：

class Human(models.Model):
    name=models.CharField(max_length=100)
    GENDER_CHOICE=((u'M',u'Male'),(u'F',u'Female'),)
    gender=models.CharField(max_length=2,choices=GENDER_CHOICE,null=True)
    class Meta:
        abstract=True
class Employee(Human):
    joint_date=models.DateField()
class Customer(Human):
    first_name=models.CharField(max_length=100)
    birth_day=models.DateField()
上面的代码，运行python manage.py syncdb 后的输出结果入下。能够看出Human表并没有被创建:

$ python manage.py syncdb
Creating tables ...
Creating table myapp_employee
Creating table myapp_customer
Installing custom SQL ...
Installing indexes ...
No fixtures found.
app_label
app_label这个选项仅仅在一种情况下使用，就是你的模型类不在默认的应用程序包下的models.py文件里。这时候你须要指定你这个模型类是那个应用程序的。比方你在其它地方写了一个模型类，而这个模型类是属于myapp的，那么你这是须要指定为：
app_label='myapp'
db_table
db_table是用于指定自己定义数据库表名的。
Django有一套默认的依照一定规则生成数据模型相应的数据库表名。假设你想使用自己定义的表名。就通过这个属性指定，比方：

table_name='my_owner_table'
db_tablespace
有些数据库有数据库表空间，比方Oracle。你能够通过db_tablespace来指定这个模型相应的数据库表放在哪个数据库表空间。

get_latest_by
因为Django的管理方法中有个lastest()方法，就是得到近期一行记录。假设你的数据模型中有 DateField 或 DateTimeField 类型的字段。你能够通过这个选项来指定lastest()是依照哪个字段进行选取的。

managed
因为Django会自己主动依据模型类生成映射的数据库表。假设你不希望Django这么做。能够把managed的值设置为False。
order_with_respect_to
这个选项一般用于多对多的关系中，它指向一个关联对象。就是说关联对象找到这个对象后它是经过排序的。指定这个属性后你会得到一个get_XXX_order()和set_XXX_order（）的方法,通过它们你能够设置或者回去排序的对象。
ordering
这个字段是告诉Django模型对象返回的记录结果集是依照哪个字段排序的。比方以下的代码：
ordering=['order_date'] # 按订单升序排列
ordering=['-order_date'] # 按订单降序排列，-表示降序
ordering=['?order_date'] # 随机排序。？表示随机
permissions
permissions主要是为了在Django Admin管理模块下使用的。假设你设置了这个属性能够让指定的方法权限描写叙述更清晰可读。

proxy
这是为了实现代理模型使用的，这里先不讲随后的文章介绍。

unique_together
unique_together这个选项用于：当你须要通过两个字段保持唯一性时使用。
比方如果你希望，一个Person的FirstName和LastName两者的组合必须是唯一的，那么须要这样设置：

unique_together = (("first_name", "last_name"),)
verbose_name
verbose_name的意思非常easy。就是给你的模型类起一个更可读的名字：
verbose_name = "pizza"
verbose_name_plural
这个选项是指定。模型的复数形式是什么。比方：

verbose_name_plural = "stories"
假设你不指定Django在型号名称加一后，自己主动’s’